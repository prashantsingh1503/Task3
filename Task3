import heapq
import pygame

WIDTH, HEIGHT = 800, 800
GRID_SIZE = 20
NUM_DRONES = 5

# Define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)

# Define directions
DIRS = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]

class Node:
    def _init_(self, x, y):
        self.x = x
        self.y = y
        self.neighbors = []
        self.occupied = False

    def add_neighbors(self, grid):
        for dx, dy in DIRS:
            x2 = self.x + dx
            y2 = self.y + dy
            if x2 >= 0 and x2 < grid.width and y2 >= 0 and y2 < grid.height:
                self.neighbors.append(grid.nodes[x2][y2])

class Grid:
    def _init_(self, width, height):
        self.width = width
        self.height = height
        self.nodes = [[Node(x, y) for y in range(height)] for x in range(width)]
        for row in self.nodes:
            for node in row:
                node.add_neighbors(self)

    def clear(self):
        for row in self.nodes:
            for node in row:
                node.occupied = False

class Drone:
    def _init_(self, start_x, start_y, end_x, end_y, start_time):
        self.start_x = start_x
        self.start_y = start_y
        self.end_x = end_x
        self.end_y = end_y
        self.start_time = start_time
        self.path = None
        self.color = YELLOW

    def set_path(self, grid):
        start_node = grid.nodes[self.start_x][self.start_y]
        end_node = grid.nodes[self.end_x][self.end_y]
        heap = [(0, start_node)]
        came_from
